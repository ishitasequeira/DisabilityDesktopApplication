/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.InventoryManager;

import Business.Enterprise.CenterEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.SupplierEnterprise;
import Business.Network.Network;
import Business.Organization.InventoryItem.InventoryItem;
import Business.Organization.InventoryManager;
import Business.Organization.Organization;
import Business.Organization.Supplier;
import Business.Organization.SupplierProduct.Order;
import Business.Organization.SupplierProduct.OrderItem;
import Business.Organization.SupplierProduct.Product;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author cardinal
 */
public class PlaceOrderJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PlaceOrderJPanel
     */
    private JPanel bottomPanel;
    private Enterprise enterprise;
    private Network network;
    private Supplier supplier;
    private Order order;
    private boolean isCheckedOut = false;
    private double cost;

    public PlaceOrderJPanel(JPanel bottomPanel, Network network, Enterprise enterprise) {
        initComponents();
        this.bottomPanel = bottomPanel;
        this.enterprise = enterprise;
        this.network = network;
        if (!isCheckedOut) {
            order = new Order();
        }
        populateSupplierComboBox();
    }

    private void populateSupplierComboBox() {
        supplierComboBox1.removeAllItems();
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterprise instanceof SupplierEnterprise) {
                for (Organization s : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    Supplier supplier1 = (Supplier) s;
                    supplierComboBox1.addItem(supplier1);

                }
            }
        }
        populateTable();
    }

    private void refreshProductTable(String keyword) {
        DefaultTableModel model = (DefaultTableModel) ViewProductJTable.getModel();
        model.setRowCount(0);
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterprise instanceof SupplierEnterprise) {
                for (Organization s : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    Supplier supplier1 = (Supplier) supplierComboBox1.getSelectedItem();
                    for (Product product : supplier.getProductCatalog().getProductList()) {
                        if (product.getName().equals(keyword));
                        {
                            Object[] row = new Object[model.getColumnCount()];
                            row[0] = product;
                            row[1] = product.getName();
                            row[2] = product.getPrice();
                            row[3] = product.getQuantity();

                        }
                    }
                }
            }
        }
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) ViewProductJTable.getModel();
        model.setRowCount(0);
        supplier = (Supplier) supplierComboBox1.getSelectedItem();
        if (supplier == null) {
            return;
        }
        for (Product product : supplier.getProductCatalog().getProductList()) {
            Object[] row = new Object[model.getColumnCount()];
            row[0] = product;
            row[1] = product.getName();
            row[2] = product.getPrice();
            row[3] = product.getQuantity();
            model.addRow(row);

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ViewProductJTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderProductTable = new javax.swing.JTable();
        supplierComboBox1 = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        txtFieldSearchProduct = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnAddToCart = new javax.swing.JButton();
        btnCheckout = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        qtySpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(192, 159, 128));

        ViewProductJTable.setForeground(new java.awt.Color(118, 50, 63));
        ViewProductJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(ViewProductJTable);

        orderProductTable.setForeground(new java.awt.Color(118, 50, 63));
        orderProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Price", "Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderProductTable);

        supplierComboBox1.setForeground(new java.awt.Color(118, 50, 63));
        supplierComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboBox1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(118, 50, 63));
        jLabel2.setText("Supplier");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(118, 50, 63));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/InventoryManager/icons8_Search_32px.png"))); // NOI18N
        jButton1.setText("Search Product");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtFieldSearchProduct.setForeground(new java.awt.Color(118, 50, 63));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(118, 50, 63));
        jLabel3.setText("Quantity");

        btnAddToCart.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAddToCart.setForeground(new java.awt.Color(118, 50, 63));
        btnAddToCart.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/InventoryManager/icons8_Add_Shopping_Cart_32px.png"))); // NOI18N
        btnAddToCart.setText("Add to cart");
        btnAddToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToCartActionPerformed(evt);
            }
        });

        btnCheckout.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnCheckout.setForeground(new java.awt.Color(118, 50, 63));
        btnCheckout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/InventoryManager/icons8_Checkout_32px.png"))); // NOI18N
        btnCheckout.setText("Checkout");
        btnCheckout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckoutActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnRemove.setForeground(new java.awt.Color(118, 50, 63));
        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/InventoryManager/icons8_Delete_32px_1.png"))); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(118, 50, 63));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/InventoryManager/icons8_Back_To_32px_1.png"))); // NOI18N
        btnBack.setText(" Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(118, 50, 63));
        jLabel4.setText("Supplier product catalog for placing order");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(qtySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(40, 40, 40)
                                        .addComponent(btnAddToCart))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 835, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 835, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(jLabel2)
                                            .addGap(18, 18, 18)
                                            .addComponent(supplierComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(txtFieldSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jButton1)))
                                    .addGap(161, 161, 161)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(521, 521, 521)
                                .addComponent(btnCheckout)
                                .addGap(18, 18, 18)
                                .addComponent(btnRemove))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack)))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel4)
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(supplierComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(txtFieldSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddToCart)
                    .addComponent(jLabel3)
                    .addComponent(qtySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCheckout)
                    .addComponent(btnRemove))
                .addGap(5, 5, 5)
                .addComponent(btnBack)
                .addContainerGap(57, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void supplierComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboBox1ActionPerformed
        // TODO add your handling code here:
        populateTable();
    }//GEN-LAST:event_supplierComboBox1ActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        bottomPanel.remove(this);
        CardLayout layout = (CardLayout) bottomPanel.getLayout();
        layout.previous(bottomPanel);
    }//GEN-LAST:event_btnBackActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String prodName = txtFieldSearchProduct.getText();
        refreshProductTable(prodName);
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnAddToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToCartActionPerformed
        // TODO add your handling code here:
        boolean alreadyPresent = false;
        int selectedRow = ViewProductJTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, " Please select a Product!!");
            return;
        }
        Product selectedProduct = (Product) ViewProductJTable.getValueAt(selectedRow, 0);
        int fetchQty = (Integer) qtySpinner.getValue();
        if (fetchQty <= 0) {
            JOptionPane.showMessageDialog(null, "Quantity needs to be greater than zero");
            java.util.logging.Logger.getLogger(PlaceOrderJPanel.class.getName()).log(java.util.logging.Level.INFO, "Quantity needs to be greater than zero!");
            return;
        }

        if (fetchQty > selectedProduct.getQuantity()) {
            JOptionPane.showMessageDialog(null, "Please select a quantity that is less than or equal to" + selectedProduct.getQuantity());
            java.util.logging.Logger.getLogger(PlaceOrderJPanel.class.getName()).log(java.util.logging.Level.INFO, "Please select a quantity that is less than or equal to" + selectedProduct.getQuantity());
            return;
        }

        for (OrderItem orderItem : order.getOrderList()) {
            if (orderItem.getProduct() == selectedProduct) {
                if (orderItem.getQuantity() + fetchQty > selectedProduct.getQuantity()) {
                    JOptionPane.showMessageDialog(null, "Please select a quantity that is less than or equal to" + selectedProduct.getQuantity());
                    java.util.logging.Logger.getLogger(PlaceOrderJPanel.class.getName()).log(java.util.logging.Level.INFO, "Please select a quantity that is less than or equal to" + selectedProduct.getQuantity());
                    return;
                }
//                int oldAvail = selectedProduct.getQuantity();
//                int newAvail = selectedProduct.getQuantity() - fetchQty;
//                selectedProduct.setQuantity(newAvail);
                orderItem.setQuantity(orderItem.getQuantity() + fetchQty);
                alreadyPresent = true;
                populateTable();
                refreshOrderTable();
//                System.out.println("ABC");
                break;

            }
        }
        if (!alreadyPresent) {
//            int oldAvail = selectedProduct.getQuantity();
//            int newAvail = selectedProduct.getQuantity() - fetchQty;
//            selectedProduct.setQuantity(newAvail);
            order.addOrderItem(selectedProduct, fetchQty);
            populateTable();
            refreshOrderTable();
//            System.out.println("ABCD");
        } else {
            JOptionPane.showMessageDialog(null, "Quantity > Availability", "Warning", JOptionPane.WARNING_MESSAGE);
            java.util.logging.Logger.getLogger(PlaceOrderJPanel.class.getName()).log(java.util.logging.Level.INFO, "Quantity > Availability");
            return;
        }


    }//GEN-LAST:event_btnAddToCartActionPerformed

    private void btnCheckoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckoutActionPerformed
        // TODO add your handling code here:
        CenterEnterprise centerEnterprise = (CenterEnterprise) enterprise;
        InventoryManager inventoryManager = null;
        if (order.getOrderList().size() > 0) {
            for (OrderItem orderItem : order.getOrderList()) {
                cost += orderItem.getQuantity() * orderItem.getProduct().getPrice();
            }
            
            if (centerEnterprise.getCenterBudget() < cost) {
                JOptionPane.showMessageDialog(null, "Out of Budget.Order is not placed");
                java.util.logging.Logger.getLogger(PlaceOrderJPanel.class.getName()).log(java.util.logging.Level.INFO, "Out of Budget. Order not placed!");
                return;
            } else {
                for (Organization organization : centerEnterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (organization instanceof InventoryManager) {
                        inventoryManager = (InventoryManager) organization;
                        inventoryManager.getOrderCatalog().add(order);
                        for (OrderItem orderItem : order.getOrderList()) {
                            InventoryItem item = null;
                            for (InventoryItem i : inventoryManager.getInventoryList().getInventoryList()) {
                                if (i.getProduct() == orderItem.getProduct()) {
                                    item = i;
                                }
                            }
                            if (item == null) {
                                inventoryManager.getInventoryList().getInventoryList().add(new InventoryItem(orderItem.getProduct(), orderItem.getQuantity()));
                            } else {
                                item.setQuantity(item.getQuantity() + orderItem.getQuantity());
                            }
                        }
                    }
                }
                populateTable();
                refreshOrderTable();
                isCheckedOut = true;
            }

            if (cost > centerEnterprise.getCenterBudget()) {
                java.util.logging.Logger.getLogger(PlaceOrderJPanel.class.getName()).log(java.util.logging.Level.INFO, "Order is beyond budget! Order cannot be placed!");
                JOptionPane.showMessageDialog(null, "Order is beyond budget!! Order cannot be placed!");
                return;
            } else {
                for (OrderItem orderItem : order.getOrderList()) {
                    orderItem.getProduct().setQuantity(orderItem.getProduct().getQuantity() - orderItem.getQuantity());
                }
                centerEnterprise.setCenterBudget(centerEnterprise.getCenterBudget() - cost);
                order = new Order();
                populateTable();
                refreshOrderTable();
                JOptionPane.showMessageDialog(null, "Order placed successfully");
                java.util.logging.Logger.getLogger(PlaceOrderJPanel.class.getName()).log(java.util.logging.Level.INFO, "Order placed successfully!");
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "Order is not placed");
            java.util.logging.Logger.getLogger(PlaceOrderJPanel.class.getName()).log(java.util.logging.Level.INFO, "Order not placed!");
            return;
        }
    }//GEN-LAST:event_btnCheckoutActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        int row = orderProductTable.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!");
            return;
        }
        OrderItem orderItem = (OrderItem) orderProductTable.getValueAt(row, 0);
//        int oldAvail = orderItem.getQuantity();
//        int newAvail = orderItem.getQuantity() + orderItem.getProduct().getQuantity();
//        orderItem.getProduct().setQuantity(newAvail);
        order.removeOrderItem(orderItem);
        JOptionPane.showMessageDialog(null, "Order Item has been removed from the list");
        java.util.logging.Logger.getLogger(PlaceOrderJPanel.class.getName()).log(java.util.logging.Level.INFO, "Order Item "+orderItem.getProduct()+" has been remved");
        refreshOrderTable();
        populateTable();

    }//GEN-LAST:event_btnRemoveActionPerformed

    private void refreshOrderTable() {
        DefaultTableModel model = (DefaultTableModel) orderProductTable.getModel();
        model.setRowCount(0);
        for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
            if (enterprise instanceof SupplierEnterprise) {
                for (OrderItem orderItem : order.getOrderList()) {

                    {
                        Object[] row = new Object[model.getColumnCount()];
                        row[0] = orderItem;
                        row[1] = orderItem.getProduct().getPrice();
                        row[2] = orderItem.getQuantity();
                        row[3] = orderItem.getQuantity() * orderItem.getProduct().getPrice();
                        model.addRow(row);
                    }
                }
            }
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ViewProductJTable;
    private javax.swing.JButton btnAddToCart;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckout;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable orderProductTable;
    private javax.swing.JSpinner qtySpinner;
    private javax.swing.JComboBox supplierComboBox1;
    private javax.swing.JTextField txtFieldSearchProduct;
    // End of variables declaration//GEN-END:variables

}
