/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Receptionist;

import Business.DisabilityCenter;
import Business.Employee.Employee;
import Business.Enterprise.CenterEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.PatientEnterprise;
import Business.Network.Network;
import Business.Organization.Doctor;
import Business.Organization.Nurse;
import Business.Organization.Organization;
import Business.Organization.Patient;
import Business.Organization.Receptionist;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AppointmentWorkRequest;
import Business.WorkQueue.PatientWaitRequest;
import UserInterface.InventoryManager.PlaceOrderJPanel;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author cardinal
 */
public class CheckinPatientJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CheckinPatientJPanel
     */
    private JPanel bottomJPanel;
    private Enterprise enterprise;
    private DisabilityCenter business;
    private UserAccount userAccount;
    private Patient patientNew;
    private ArrayList<Enterprise> currentEnterpriseList;
   private  ArrayList<Organization> patientOrganizationDir;
    private HashMap<Integer, Patient> patientsCheckedin;

    public CheckinPatientJPanel(JPanel bottomJPanel, Enterprise enterprise, DisabilityCenter business, UserAccount userAccount) {
        initComponents();
        this.bottomJPanel = bottomJPanel;
        this.enterprise = enterprise;
        this.business = business;
        this.userAccount = userAccount;
        patientNew = null;
        currentEnterpriseList = null;
        patientOrganizationDir = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtFieldPatientIDSearch = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtFieldName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtFieldPatient = new javax.swing.JTextField();
        btnAppointment = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        ComboBoxPatient = new javax.swing.JComboBox();
        btnCreatePatient = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnPatientFromDifferentNetwork = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(192, 159, 128));

        txtFieldPatientIDSearch.setForeground(new java.awt.Color(118, 50, 63));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(118, 50, 63));
        jLabel2.setText("Patient ID / Patient Name:");

        btnSearch.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnSearch.setForeground(new java.awt.Color(118, 50, 63));
        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Receptionist/icons8_Search_32px.png"))); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(118, 50, 63));
        jLabel3.setText("Patient Name:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(118, 50, 63));
        jLabel4.setText("Patient Details:");

        txtFieldName.setEditable(false);
        txtFieldName.setForeground(new java.awt.Color(118, 50, 63));
        txtFieldName.setEnabled(false);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(118, 50, 63));
        jLabel5.setText("Patient Id:");

        txtFieldPatient.setEditable(false);
        txtFieldPatient.setForeground(new java.awt.Color(118, 50, 63));
        txtFieldPatient.setEnabled(false);

        btnAppointment.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnAppointment.setForeground(new java.awt.Color(118, 50, 63));
        btnAppointment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Receptionist/icons8_Timesheet_32px.png"))); // NOI18N
        btnAppointment.setText("Appoint Nurse/Doctor");
        btnAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAppointmentActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(118, 50, 63));
        jLabel6.setText("Disability Type:");

        ComboBoxPatient.setForeground(new java.awt.Color(118, 50, 63));
        ComboBoxPatient.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Physical", "Mental" }));

        btnCreatePatient.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnCreatePatient.setForeground(new java.awt.Color(118, 50, 63));
        btnCreatePatient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Receptionist/icons8_Add_User_Male_32px.png"))); // NOI18N
        btnCreatePatient.setText("New Patient");
        btnCreatePatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePatientActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnBack.setForeground(new java.awt.Color(118, 50, 63));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Receptionist/icons8_Back_To_32px_1.png"))); // NOI18N
        btnBack.setText(" Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnPatientFromDifferentNetwork.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnPatientFromDifferentNetwork.setForeground(new java.awt.Color(118, 50, 63));
        btnPatientFromDifferentNetwork.setIcon(new javax.swing.ImageIcon(getClass().getResource("/UserInterface/Receptionist/icons8_Male_User_32px.png"))); // NOI18N
        btnPatientFromDifferentNetwork.setText("Patient from Different Network");
        btnPatientFromDifferentNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientFromDifferentNetworkActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Bold", 1, 36)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(118, 50, 63));
        jLabel7.setText("Check-In Patients");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addContainerGap(862, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(271, 271, 271)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnAppointment)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addGap(21, 21, 21)
                                    .addComponent(txtFieldPatientIDSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(btnSearch))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel4)
                                    .addGap(47, 47, 47)
                                    .addComponent(btnCreatePatient)
                                    .addGap(27, 27, 27)
                                    .addComponent(btnPatientFromDifferentNetwork))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(txtFieldPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel3)
                                                .addComponent(jLabel5))
                                            .addGap(68, 68, 68)
                                            .addComponent(txtFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldPatientIDSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(btnSearch))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btnCreatePatient)
                    .addComponent(btnPatientFromDifferentNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtFieldPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(ComboBoxPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(70, 70, 70)
                .addComponent(btnAppointment)
                .addGap(45, 45, 45)
                .addComponent(btnBack)
                .addContainerGap(203, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    private void searchPatientOrganization() {

        // TODO add your handling code here:
        if (txtFieldPatientIDSearch.getText() == null) {
            JOptionPane.showMessageDialog(null, "Please enter the patient id!");
            return;
        }

        //Step 1: Get current Network's enterprise list
        for (Network n : business.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (this.enterprise.equals(e)) {
                    currentEnterpriseList = n.getEnterpriseDirectory().getEnterpriseList();
                    break;
                }
            }
        }
        //Step 2: get Patient Organization List from current Enterprise List
        for (Enterprise e : currentEnterpriseList) {
            if (e instanceof PatientEnterprise) {
                patientOrganizationDir = e.getOrganizationDirectory().getOrganizationList();
                break;
            }
        }

    }

    public void setPatientDetailsOnScreen(Patient p) {
        if (p == null) {
            return;
        }
        patientNew = p;
        txtFieldName.setText(p.getPatientName());
        txtFieldPatient.setText(String.valueOf(p.getPatientID()));
    }

    public void setPatientNew(Patient patient) {
        patientNew = patient;
        setPatientDetailsOnScreen(patientNew);
    }
    
    public void setAndSavePatientNew(Patient patient) {
        patientNew = patient;
        
        //Save the patient to this network
        //Step 1: Get current Network's enterprise list
        for (Network n : business.getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (this.enterprise.equals(e)) {
                    currentEnterpriseList = n.getEnterpriseDirectory().getEnterpriseList();
                    break;
                }
            }
        }
        //Step 2: get Patient Organization List from current Enterprise List
        for (Enterprise e : currentEnterpriseList) {
            if (e instanceof PatientEnterprise) {
                PatientEnterprise ph = (PatientEnterprise)e;
                ph.addPatient(patientNew);
                break;
            }
        }
        
        setPatientDetailsOnScreen(patientNew);
    }

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        searchPatientOrganization();
        ArrayList<Patient> patients = new ArrayList<>();

        for (Organization o : patientOrganizationDir) {
            Patient patient = (Patient) o;
            if (txtFieldPatientIDSearch.getText().equals(String.valueOf(patient.getPatientID()))
                    || patient.getPatientName().contains(txtFieldPatientIDSearch.getText())) {
                patients.add(patient);
            }

        }

        SearchPatients searchPatients = new SearchPatients(null, true, bottomJPanel, patients);

        searchPatients.setVisible(true);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCreatePatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePatientActionPerformed
        NewPatientRegistration newPatientRegistration = new NewPatientRegistration(bottomJPanel, enterprise, business, userAccount);
        bottomJPanel.add("newPatientRegistration", newPatientRegistration);
        CardLayout layout = (CardLayout) bottomJPanel.getLayout();
        layout.next(bottomJPanel);
    }//GEN-LAST:event_btnCreatePatientActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        bottomJPanel.remove(this);

        //update Receptionist's Wait Queue
        Component[] componentArray = bottomJPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ReceptionistWorkAreaJPanel receptionistWorkAreaJPanel = (ReceptionistWorkAreaJPanel) component;
        receptionistWorkAreaJPanel.refreshPatientQueue();

        CardLayout layout = (CardLayout) bottomJPanel.getLayout();
        layout.previous(bottomJPanel);

    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAppointmentActionPerformed
        boolean sendToDoctor = false;

        //get Receptionist organization
        for(Organization o : enterprise.getOrganizationDirectory().getOrganizationList()){
            if(o instanceof Receptionist){
                Receptionist receptionist = (Receptionist)o;
                patientsCheckedin = receptionist.getPatientsCheckedin();
                break;
            }
        }

        //check if patient is already checkedin
        if(patientsCheckedin.containsKey(patientNew.getPatientID())){
            JOptionPane.showMessageDialog(null, "Patient is already checked in!!");
            java.util.logging.Logger.getLogger(CheckinPatientJPanel.class.getName()).log(java.util.logging.Level.INFO, "Patient "+patientNew.getName()+" is already checked in!");
            return;
        }
        
        String type = (String) ComboBoxPatient.getSelectedItem();
        //Send the patient to Doctor if Mental disability
        sendToDoctor = type.equals("Mental");

        ArrayList<Employee> availableDoctors = new ArrayList<>();
        boolean fillEmployees = false;
        boolean noDoctorsAvailable = true;
        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            fillEmployees = false;
            if (sendToDoctor
                    && organization instanceof Doctor) {
                fillEmployees = true;
            }
            if (!sendToDoctor
                    && organization instanceof Nurse) {
                fillEmployees = true;
            }
            if (fillEmployees) {
                for (Employee e : organization.getEmployeeDirectory().getEmployeeList()) {
                    if (e.getIsCheckedIn() && e.getIsAvailable()) {
                        availableDoctors.add(e);
                    }
                    if (e.getIsCheckedIn()) {
                        noDoctorsAvailable = false;
                    }
                }

                if (noDoctorsAvailable) {
                    
                    //Increment the NumberOfTimesDoctorsNursesWereNotCheckedIn counter for Center Enterprise
                    //get the Center enterprise
                    boolean recordFound = false;
                    for(Network n : business.getNetworkList()){
                        for(Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()){
                            if(e instanceof CenterEnterprise){
                                CenterEnterprise centerEnterprise = (CenterEnterprise)e;
                                centerEnterprise.incrementNumberOfTimesDoctorsNursesWereNotCheckedIn();
                                recordFound = true;
                                break;
                            }
                        }
                        if(recordFound)
                            break;
                    }
                    
                    if (sendToDoctor) {
                        JOptionPane.showMessageDialog(null, "Sorry! No Doctors checked-in at this time!");
                        java.util.logging.Logger.getLogger(CheckinPatientJPanel.class.getName()).log(java.util.logging.Level.INFO, "No doctors available!");
                    } else {
                        JOptionPane.showMessageDialog(null, "Sorry! No Nurses checked-in at this time!");
                        java.util.logging.Logger.getLogger(CheckinPatientJPanel.class.getName()).log(java.util.logging.Level.INFO, "No nurses available!");
                    }
                    return;
                }

                break;
            }

        }

        //Assign an available doctor (if available)
        if (availableDoctors.size() > 0) {
            //Step 1: sort availableDoctors based on patients diagnosed
            Collections.sort(availableDoctors, new Comparator<Employee>() {
                @Override
                public int compare(Employee o1, Employee o2) {
                    return o1.getPatientsDiagnosed() - o2.getPatientsDiagnosed();
                }
            });
            Employee assignedEmployee = availableDoctors.get(0);
            //Step 2: Add the patient to assignedEmployee's work queue
            for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (organization instanceof Doctor
                        || organization instanceof Nurse) {
                    for (UserAccount useracc : organization.getUserAccountDirectory().getUserAccountList()) {
                        if (useracc.getEmployee().equals(assignedEmployee)) {
                            AppointmentWorkRequest appointmentWorkRequest = new AppointmentWorkRequest();
                            appointmentWorkRequest.setSender(userAccount);
                            appointmentWorkRequest.setMessage("Employee assigned");
                            appointmentWorkRequest.setStatus("Sent");
                            appointmentWorkRequest.setReceiver(useracc);
                            appointmentWorkRequest.setObject(patientNew);
                            useracc.getWorkQueue().getWorkRequestList().add(appointmentWorkRequest);
                            //Set the employee to be not available
                            assignedEmployee.setIsAvailable(false);
                            if (sendToDoctor) {
                            JOptionPane.showMessageDialog(null, "Patient has been appointed to Doctor " + assignedEmployee.getName());
                            java.util.logging.Logger.getLogger(CheckinPatientJPanel.class.getName()).log(java.util.logging.Level.INFO, "Patient has been appointed to Doctor " + assignedEmployee.getName());
                            }
                            else{
                                JOptionPane.showMessageDialog(null, "Patient has been appointed to Nurse " + assignedEmployee.getName());
                            }
                            break;
                        }
                    }
                }
            }
        } //Assign patient to wait queue
        else {
            PatientWaitRequest patientWaitRequest = new PatientWaitRequest();
            patientWaitRequest.setSender(userAccount);
            patientWaitRequest.setStatus("Waiting");
            patientWaitRequest.setObject(patientNew);
            patientWaitRequest.setDisabilityType(type);
            userAccount.getWorkQueue().getWorkRequestList().add(patientWaitRequest);
            if (sendToDoctor) {
                JOptionPane.showMessageDialog(null, "All Doctors busy, patient added to wait queue");
                java.util.logging.Logger.getLogger(CheckinPatientJPanel.class.getName()).log(java.util.logging.Level.INFO, "All Doctors busy, patient added to wait queue");
            } else {
                JOptionPane.showMessageDialog(null, "All Nurses busy, patient added to wait queue");
                java.util.logging.Logger.getLogger(CheckinPatientJPanel.class.getName()).log(java.util.logging.Level.INFO, "All Nurses busy, patient added to wait queue");
            }
        }
        
        patientsCheckedin.put(patientNew.getPatientID(), patientNew);
        
        patientNew = null;
        txtFieldName.setText("");
        txtFieldPatient.setText("");
        txtFieldPatientIDSearch.setText("");
    }//GEN-LAST:event_btnAppointmentActionPerformed

    private void btnPatientFromDifferentNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientFromDifferentNetworkActionPerformed
        //build ArrayList of Networks and remove current network
        ArrayList<Network> networkList = new ArrayList<>();
        boolean currentNetwork = false;
        for(Network n : business.getNetworkList()){
            for(Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()){
                if(enterprise.equals(e)){
                    currentNetwork = true;
                    break;
                }
            }
            if(!currentNetwork){
                networkList.add(n);
            }
        }
        
        PatientsFromDifferentNetwork patientsFromDifferentNetwork = new PatientsFromDifferentNetwork(null, true, bottomJPanel, networkList);
        patientsFromDifferentNetwork.setVisible(true);
    }//GEN-LAST:event_btnPatientFromDifferentNetworkActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboBoxPatient;
    private javax.swing.JButton btnAppointment;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreatePatient;
    private javax.swing.JButton btnPatientFromDifferentNetwork;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JTextField txtFieldName;
    private javax.swing.JTextField txtFieldPatient;
    private javax.swing.JTextField txtFieldPatientIDSearch;
    // End of variables declaration//GEN-END:variables
}
